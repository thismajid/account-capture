<!DOCTYPE html>
<html lang="en" dir="ltr">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="/css/style.css">
    <style>
        .log-container {
            max-height: 200px;
            overflow-y: auto;
            background-color: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 0.25rem;
            padding: 0.75rem;
            font-family: monospace;
            font-size: 0.875rem;
        }

        .output-container {
            background-color: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 0.25rem;
            padding: 0.75rem;
            font-family: monospace;
            white-space: pre-wrap;
            word-break: break-word;
        }

        .output-container pre {
            margin-bottom: 0;
            white-space: pre-wrap;
        }
        
        .toast-container {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1050;
        }
    </style>
</head>

<body>
    <div class="container mt-5 mb-5">
        <div class="row justify-content-center">
            <div class="col-md-10">
                <div class="card shadow">
                    <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                        <h1 class="h4 mb-0">Processing Results</h1>
                        <span id="status-badge" class="badge bg-info">Processing</span>
                    </div>
                    <div class="card-body">
                        <div class="mb-4">
                            <h2 class="h5">Operation Progress</h2>
                            <div class="progress mb-2">
                                <div id="progress-bar" class="progress-bar progress-bar-striped progress-bar-animated"
                                    style="width: 0%"></div>
                            </div>
                            <div id="progress-log" class="log-container mt-2">
                                <div class="text-muted">Waiting to start processing...</div>
                            </div>
                        </div>

                        <div class="mb-4" id="result-section" style="display: none;">
                            <h2 class="h5">Final Result</h2>
                            <div class="d-flex justify-content-end mb-2">
                                <button id="copy-button" class="btn btn-sm btn-outline-secondary me-2">
                                    Copy
                                </button>
                                <button id="download-button" class="btn btn-sm btn-outline-primary">
                                    Download
                                </button>
                            </div>
                            <div id="final-output" class="output-container">
                                <div class="text-muted">Waiting for process to complete...</div>
                            </div>
                        </div>
                    </div>
                    <div class="card-footer">
                        <a href="/" class="btn btn-secondary">Back to Home</a>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Toast notification for copy feedback -->
    <div class="toast-container">
        <div id="copy-toast" class="toast align-items-center text-white bg-success" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="d-flex">
                <div class="toast-body">
                    Text copied to clipboard!
                </div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.socket.io/4.5.4/socket.io.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const jobId = '<%= jobId %>';
            const statusBadge = document.getElementById('status-badge');
            const progressBar = document.getElementById('progress-bar');
            const progressLog = document.getElementById('progress-log');
            const finalOutput = document.getElementById('final-output');
            const resultSection = document.getElementById('result-section');
            const copyButton = document.getElementById('copy-button');
            const downloadButton = document.getElementById('download-button');
            const copyToast = document.getElementById('copy-toast');
            
            // Initialize Bootstrap toast
            const toast = new bootstrap.Toast(copyToast, {
                delay: 2000
            });
    
            // Progress tracking
            let progressMessages = [];
            let keyProgressPoints = {
                "راه‌اندازی مرورگر": 5,
                "دریافت کوکی": 40,
                "عنصر یافت شد": 50,
                "کلیک موفقیت‌آمیز": 60,
                "دریافت کوکی‌های نهایی": 75,
                "تعداد کوکی‌های ترکیبی": 80,
                "پردازش با موفقیت": 95
            };
            
            let outputText = '';
            let userCredentials = 'unknown-user';
    
            // Connect to Socket.IO
            const socket = io();
    
            console.log('Connecting to Socket.IO...');
    
            // Join the job room when connected
            socket.on('connect', () => {
                console.log('Socket connected, ID:', socket.id);
    
                // Join the job room
                fetch(`/api/job/${jobId}/join`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ socketId: socket.id })
                })
                    .then(response => response.json())
                    .then(data => {
                        console.log('Joined room:', data);
                        addLogEntry('Connected to server.');
                        updateProgress(2); // Initial progress
                    })
                    .catch(err => {
                        console.error('Error joining room:', err);
                        addLogEntry('Error connecting to server.', 'error');
                    });
            });
    
            // Handle progress updates
            socket.on('progress', (data) => {
                const message = data.message;
                addLogEntry(message);
                progressMessages.push(message);
                
                // Update progress based on message content
                updateProgressFromMessage(message);
            });
    
            // Handle data updates
            socket.on('data', (data) => {
                // Just log that data was received
                if (data.data) {
                    addLogEntry('New data received.');
                    updateProgress(Math.min(getProgressPercentage() + 1, 95)); // Small increment
                }
            });
    
            // Handle completion
            socket.on('complete', (data) => {
                statusBadge.textContent = 'Completed';
                statusBadge.classList.remove('bg-info');
                statusBadge.classList.add('bg-success');
    
                updateProgress(100); // Set to 100% on completion
                progressBar.classList.remove('progress-bar-animated');
    
                addLogEntry('Processing completed successfully.', 'success');
    
                // Display the final formatted output
                if (data.results && data.results.formattedOutput) {
                    outputText = data.results.formattedOutput;
                    finalOutput.innerHTML = `<pre>${escapeHtml(outputText)}</pre>`;
                    resultSection.style.display = 'block';
                    
                    // Extract credentials for filename if available
                    if (data.results.credentials) {
                        userCredentials = data.results.credentials.split(':')[0]; // Get email part
                    } else {
                        // Try to extract credentials from the output text
                        const accountMatch = outputText.match(/Account\s*:\s*([^\n]+)/);
                        if (accountMatch && accountMatch[1]) {
                            const accountInfo = accountMatch[1].trim();
                            if (accountInfo.includes(':')) {
                                userCredentials = accountInfo.split(':')[0].trim();
                            } else {
                                userCredentials = accountInfo;
                            }
                        }
                    }
                    
                    // Automatically trigger download after a short delay
                    setTimeout(() => {
                        downloadFile();
                        addLogEntry('File download started automatically.', 'success');
                    }, 1000);
                } else if (data.results) {
                    // If formattedOutput is not available, try to create a formatted output from the results
                    let formattedText = '';
                    
                    // Format profile information if available
                    if (data.results.profile) {
                        formattedText += "=== PROFILE INFORMATION ===\n";
                        const profile = data.results.profile;
                        for (const key in profile) {
                            formattedText += `${key}: ${profile[key]}\n`;
                        }
                        formattedText += "\n";
                    }
                    
                    // Format games information if available
                    if (data.results.games && data.results.games.length) {
                        formattedText += "=== GAMES ===\n";
                        data.results.games.forEach((game, index) => {
                            formattedText += `${index + 1}. ${game.name} (${game.platform})\n`;
                        });
                        formattedText += "\n";
                    }
                    
                    // Format devices information if available
                    if (data.results.devices && data.results.devices.length) {
                        formattedText += "=== DEVICES ===\n";
                        data.results.devices.forEach((device, index) => {
                            formattedText += `${index + 1}. ${device.name} (${device.platform})\n`;
                        });
                        formattedText += "\n";
                    }
                    
                    // Format backup codes if available
                    if (data.results.backupCodes && data.results.backupCodes.length) {
                        formattedText += "=== BACKUP CODES ===\n";
                        data.results.backupCodes.forEach((code, index) => {
                            formattedText += `${code}${index % 2 === 1 ? '\n' : '\t'}`;
                        });
                        formattedText += "\n";
                    }
                    
                    // Format transactions if available
                    if (data.results.trans) {
                        formattedText += "=== TRANSACTIONS ===\n";
                        formattedText += data.results.trans + "\n\n";
                    }
                    
                    // Add any other data
                    for (const key in data.results) {
                        if (!['profile', 'games', 'devices', 'backupCodes', 'trans', 'formattedOutput', 'credentials'].includes(key)) {
                            try {
                                formattedText += `=== ${key.toUpperCase()} ===\n`;
                                if (typeof data.results[key] === 'object') {
                                    formattedText += JSON.stringify(data.results[key], null, 2) + "\n\n";
                                } else {
                                    formattedText += data.results[key] + "\n\n";
                                }
                            } catch (e) {
                                formattedText += `[Error formatting ${key}]\n\n`;
                            }
                        }
                    }
                    
                    outputText = formattedText;
                    finalOutput.innerHTML = `<pre>${escapeHtml(outputText)}</pre>`;
                    resultSection.style.display = 'block';
                    
                    // Automatically trigger download after a short delay
                    setTimeout(() => {
                        downloadFile();
                        addLogEntry('File download started automatically.', 'success');
                    }, 1000);
                }
            });
    
            // Handle errors
            socket.on('error', (data) => {
                statusBadge.textContent = 'Error';
                statusBadge.classList.remove('bg-info');
                statusBadge.classList.add('bg-danger');
    
                addLogEntry(`Error: ${data.error}`, 'error');
            });
    
            // Copy button functionality - Multiple approaches
            copyButton.addEventListener('click', () => {
                if (!outputText) {
                    addLogEntry('No text available to copy.', 'error');
                    return;
                }
                
                // Method 1: Using Clipboard API
                copyTextToClipboard(outputText);
            });
    
            // Function to update progress based on message content
            function updateProgressFromMessage(message) {
                // Check for key progress points
                for (const [keyPhrase, progressValue] of Object.entries(keyProgressPoints)) {
                    if (message.includes(keyPhrase)) {
                        updateProgress(progressValue);
                        return;
                    }
                }
                
                // If no key phrases matched, make a small increment
                const currentProgress = getProgressPercentage();
                if (currentProgress < 95) {
                    updateProgress(currentProgress + 0.5);
                }
            }
    
            // Function to get current progress percentage
            function getProgressPercentage() {
                const currentWidth = progressBar.style.width;
                if (currentWidth) {
                    return parseFloat(currentWidth);
                }
                return 0;
            }
    
            // Function to update progress bar
            function updateProgress(percentage) {
                const roundedPercentage = Math.min(Math.round(percentage), 100);
                progressBar.style.width = `${roundedPercentage}%`;
                progressBar.textContent = `${roundedPercentage}%`;
            }
    
            // Function to copy text to clipboard using multiple fallback methods
            function copyTextToClipboard(text) {
                console.log("Attempting to copy text, length:", text.length);
                
                // Method 1: Modern Clipboard API
                if (navigator.clipboard && window.isSecureContext) {
                    console.log("Using Clipboard API");
                    navigator.clipboard.writeText(text)
                        .then(() => {
                            showCopySuccess();
                        })
                        .catch(err => {
                            console.error('Clipboard API failed:', err);
                            fallbackCopyTextToClipboard(text);
                        });
                } else {
                    // Method 2: Fallback for older browsers
                    console.log("Using fallback copy method");
                    fallbackCopyTextToClipboard(text);
                }
            }
            
            // Fallback copy method using document.execCommand
            function fallbackCopyTextToClipboard(text) {
                try {
                    // Create a temporary textarea element
                    const textarea = document.createElement('textarea');
                    textarea.value = text;
                    
                    // Make it invisible but part of the document
                    textarea.style.position = 'fixed';
                    textarea.style.opacity = '0';
                    document.body.appendChild(textarea);
                    
                    // Select and copy
                    textarea.select();
                    const successful = document.execCommand('copy');
                    
                    // Clean up
                    document.body.removeChild(textarea);
                    
                    if (successful) {
                        showCopySuccess();
                    } else {
                        console.error('execCommand copy failed');
                        showCopyError();
                    }
                } catch (err) {
                    console.error('Fallback copy failed:', err);
                    showCopyError();
                }
            }
            
            // Show copy success feedback
            function showCopySuccess() {
                // Visual feedback on the button
                copyButton.classList.remove('btn-outline-secondary');
                copyButton.classList.add('btn-success');
                copyButton.textContent = 'Copied!';
                
                // Show toast notification
                toast.show();
                
                // Reset button after delay
                setTimeout(() => {
                    copyButton.classList.remove('btn-success');
                    copyButton.classList.add('btn-outline-secondary');
                    copyButton.textContent = 'Copy';
                }, 2000);
                
                // Log success
                addLogEntry('Text copied to clipboard.', 'success');
            }
            
            // Show copy error feedback
            function showCopyError() {
                copyButton.classList.remove('btn-outline-secondary');
                copyButton.classList.add('btn-danger');
                copyButton.textContent = 'Copy Failed';
                
                setTimeout(() => {
                    copyButton.classList.remove('btn-danger');
                    copyButton.classList.add('btn-outline-secondary');
                    copyButton.textContent = 'Copy';
                }, 2000);
                
                addLogEntry('Failed to copy text to clipboard.', 'error');
            }
    
            // Download button functionality
            downloadButton.addEventListener('click', () => {
                downloadFile();
            });
            
            // Function to download the file
            function downloadFile() {
                if (outputText) {
                    // Create filename with format credentials-date.txt
                    const date = new Date().toISOString().split('T')[0]; // Format: YYYY-MM-DD
                    const filename = `${userCredentials}-${date}.txt`;
                    
                    // Create a Blob with the text content
                    const blob = new Blob([outputText], { type: 'text/plain' });
                    
                    // Create a temporary URL for the Blob
                    const url = URL.createObjectURL(blob);
                    
                    // Create a temporary anchor element for downloading
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = filename;
                    
                    // Trigger the download
                    document.body.appendChild(a);
                    a.click();
                    
                    // Clean up
                    setTimeout(() => {
                        document.body.removeChild(a);
                        URL.revokeObjectURL(url);
                    }, 0);
                    
                    addLogEntry(`File "${filename}" downloaded.`, 'success');
                } else {
                    addLogEntry('No content available to download.', 'error');
                }
            }
    
            // Helper function to add log entries
            function addLogEntry(message, type = 'info') {
                const logEntry = document.createElement('div');
                logEntry.textContent = message;
                
                if (type === 'error') {
                    logEntry.classList.add('text-danger');
                } else if (type === 'success') {
                    logEntry.classList.add('text-success', 'fw-bold');
                }
                
                progressLog.appendChild(logEntry);
                progressLog.scrollTop = progressLog.scrollHeight;
                
                // Also log to console for debugging
                console.log(`[${type}] ${message}`);
            }
    
            // Helper function to escape HTML
            function escapeHtml(unsafe) {
                return unsafe
                    .replace(/&/g, "&amp;")
                    .replace(/</g, "&lt;")
                    .replace(/>/g, "&gt;")
                    .replace(/"/g, "&quot;")
                    .replace(/'/g, "&#039;");
            }
        });
    </script>
</body>

</html>
